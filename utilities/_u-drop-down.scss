/* ============================================================================
   @UTILITIES -> DROP DOWN
   ========================================================================= */


/**
 * A generic drop down utility powered by some JavaScript which toggles a
 * class e.g. `is-visible` on the drop down trigger (the button that makes the
 * drop down visible and invisible) and the target (the actual drop down).
 * This class will be used to make the drop down target visible when the
 * trigger is selected. There is also a version for showing the drop down via
 * the `:hover` pseudo class which is turned off for touch devices.
 *
 * N.B. for the hover version to work the target must come directly after the
 * trigger in the DOM as it relies on an adjacent sibling selector.
 *
 * @markup
   <div class="drop-down">
     <!-- The trigger -->
     <button class="drop-down__trigger"> ... </button>
     <!-- The target -->
     <div class="drop-down__target"> ... </div>
   </div>
 *
 * @consideration
 * This could be redundant as other utilities could do handle this e.g.
 * Position / Toggle Visibility?
 *
 * @demo
 * http://codepen.io/team/westfieldlabs/full/xFHfk#drop-down
 */


/**
 * Settings.
 */

// The state class that is powered by JavaScript
$drop-down-state-class:           is-visible !default;

// Class that is used to identify touch support
$drop-down-touch-support-class:   is-touch !default;


/**
 * Drop down container for the trigger and target.
 *
 * 1. Sets the positioning context for the target.
 */

@include generate-at-breakpoints(u-drop-down) {
  position: relative; // [1]
}


  /**
   * The target, the actual drop down.
   */

  @include generate-at-breakpoints(u-drop-down__target) {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;

    // Show the drop down via the JavaScript powered state class and the
    // optional `:hover` pseudo class.
    &.#{$drop-down-state-class},
   .drop-down--on-hover .drop-down__trigger:hover + & {display: block;}
  }


  /**
   * Disable for touch devices as they don't have `:hover` support.
   *
   * N.B. this will require functionality that can append a hook to an element
   * (typically the `html` element) if touch is supported.
   */

  .#{$drop-down-touch-support-class} .drop-down--on-hover {
    @include generate-at-breakpoints(u-drop-down) {
      display: none;
    }
  }